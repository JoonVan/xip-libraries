#Inventor V2.1 ascii

Separator {
    DEF camera OrthographicCamera {
	position	0.5 0.5 -0.366018
	orientation	0 0 1  0
	nearDistance	-1.732
	farDistance	0
    }
    DEF light DirectionalLight {
    }
    DEF +0 SoXipTextureUnit {
	fields [ SFInt32 textureStage, SFBool autoGenerate ]
	textureStage	0
	autoGenerate	FALSE
    }
    DEF volumeTexture SoXipTexture {
	fields [ SoXipSFDataImage image, SFEnum wrapS, SFEnum wrapT, SFEnum wrapR,
		SFEnum filter, SFEnum model, SFEnum textureDimension, SFEnum internalFormat,
		SFBool padDimensions, SFVec3f textureSize,  ]
	image	"DATA" =
	    DEF volumeData+1 SoXipVolumeDicom {
		inputs [ SoXipMFDataDicom input ]
		input	[ "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA",
				  "DATA" ] =
		    SoXipSortDicom {
			inputs [ SoXipMFDataDicom input ]
			input	[ "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA",
					  "DATA" ] =
			    DEF dicomLoader SoXipLoadDicom {
				inputs [ MFString name ]
				name	"..\data\Acetabulum"
				outputs [ SoXipMFDataDicom dicom ]
			    }
			    . dicom

			outputs [ SoXipMFDataDicom output ]
		    }
		    . output

		outputs [ SoXipSFDataImage output ]
	    }
	    . output

	wrapS	CLAMP_TO_BORDER
	wrapT	CLAMP_TO_BORDER
	wrapR	CLAMP_TO_BORDER
	filter	LINEAR
	model	REPLACE
	textureDimension	AUTO
	internalFormat	LUMINANCE16
	padDimensions	FALSE
	textureSize	512 512 119
    }
    DEF +2 SoXipTextureUnit {
	fields [ SFInt32 textureStage, SFBool autoGenerate ]
	textureStage	1
	autoGenerate	FALSE
    }
    DEF switch Switch {
	whichChild	1
	Group {
	    DEF vrtLut SoXipLut {
		fields [ SFEnum inputMode, SFEnum fileMode, SFShort bitsUsed, SFFloat rampWidth,
			SFFloat rampCenter, SFString fileIn, SFShort fileEntries, MFColor arrayColor,
			MFFloat arrayAlpha ]
		inputMode	FILE
		fileMode	FLOAT_COMMA
		bitsUsed	12
		rampWidth	0.634277
		rampCenter	0.0200195
		fileIn	"AngioRunOff.txt"
		fileEntries	4096
		arrayColor	[  ]
		arrayAlpha	[  ]
	    }
	    DEF +3 SoXipLutTexture {
		fields [ SoSFVec2s textureSize ]
		textureSize	4096 1
	    }
	    SoXipLoadShaders {
		fields [ SFString fpFilename, SFString vpFilename, SFString fpDefines,  ]
		fpFilename	"simple_tf_fp.glsl"
		vpFilename	"simple_vp.glsl"
		fpDefines	"k"
	    }
	    SoXipUniformInt {
		fields [ SFString name, MFInt32 value ]
		name	"width"
		value	512 =
		    DEF +4 SoXipImageAttributes {
			inputs [ SoXipSFDataImage image ]
			image	"DATA" =
			    USE volumeData+1
			    . output

			outputs [ SFMatrix modelMatrix, SFShort width, SFShort height, SFShort depth,
				SFShort bitsStored, SFMatrix defaultOrientation, SFShort orthoScanOrientation, SFMatrix orthoOrientation1,
				SFMatrix orthoOrientation2, SFMatrix orthoOrientation3, SFVec3f defaultCenter ]
		    }
		    . width

	    }
	    SoXipUniformInt {
		fields [ SFString name, MFInt32 value ]
		name	"height"
		value	512 =
		    USE +4
		    . height

	    }
	    SoXipUniformInt {
		fields [ SFString name, MFInt32 value ]
		name	"depth"
		value	119 =
		    USE +4
		    . depth

	    }
	}
	Group {
	    DEF mprLut SoXipLut {
		fields [ SFShort bitsUsed, SFFloat rampWidth, SFFloat rampCenter, MFColor arrayColor,
			MFFloat arrayAlpha ]
		bitsUsed	12
		rampWidth	1
		rampCenter	0.5
		arrayColor	[  ]
		arrayAlpha	[  ]
	    }
	    USE +3
	    SoXipLoadShaders {
		fields [ SFString fpFilename, SFString vpFilename,  ]
		fpFilename	"mpr_fp.glsl"
		vpFilename	"mpr_vp.glsl"
	    }
	}
    }
    SoXipUniformInt {
	fields [ SFString name, MFInt32 value ]
	name	"volume"
	value	0 =
	    USE +0
	    . textureStage

    }
    SoXipUniformInt {
	fields [ SFString name, MFInt32 value ]
	name	"lut"
	value	1 =
	    USE +2
	    . textureStage

    }
    DEF slicer SoXipSlicer {
	fields [ SFInt32 numSlices, SFBool useComplexity, SFEnum mode, SFEnum compositing ]
	numSlices	500
	useComplexity	TRUE
	mode	VRT
	compositing	BACK_TO_FRONT
    }
}

#Inventor V2.1 ascii

Separator {
    SoXipHtmlViewer {
	fields [ SFString file, SFInt32 width, SFInt32 height ]
	file	"html/main.html"
	width	1024
	height	768
	DEF RenderArea SoXipViewportGroup {
	    fields [ SFBool activateOnClick, MFVec4f viewports, SFInt32 current,  ]
	    activateOnClick	FALSE
	    viewports	[ 0 0 0.5 0.5,
			      0 0.5 0.5 0.5,
			      0.5 0.5 0.5 0.5,
			      0.5 0 0.5 0.5 ]
	    current	2
	    Separator {
		Group {
		    DEF +0 SoXipMprPlane {
			fields [ SFMatrix plane, SFVec3f center, SFColor color, SFInt32 id,
				 ]
			plane	-0.982413 -0.147244 -0.114817 0
				-0.176336 0.52945 0.829812 0
				-0.0613952 0.835465 -0.546103 0
				0.514838 0.494457 0.522612 1
			center	0.437085 0.533065 0.590418
			color	0 0 1
			id	2
		    }
		    DEF +1 SoXipMprPlane {
			fields [ SFMatrix plane, SFVec3f center, SFColor color, SFInt32 id,
				 ]
			plane	5.49489e-008 1 9.20803e-008 0
				7.83914e-008 8.19419e-008 1 0
				1 3.35233e-008 6.92802e-008 0
				0.437085 0.475676 0.51125 1
			center	0.437085 0.533065 0.590418
			color	0 1 0
			id	1
		    }
		    DEF +2 SoXipMprPlane {
			fields [ SFMatrix plane, SFVec3f center, SFColor color,  ]
			plane	1 0 0 0
				0 -1 -8.74228e-008 0
				0 8.74228e-008 -1 0
				0.5 0.5 0.590418 1
			center	0.437085 0.533065 0.590418
			color	1 0 0
		    }
		}
		DEF MprExaminer0 SoXipMprExaminer {
		    mode	ROTATE
		    border	TRUE
		    dogEar	TRUE
		    orientationCube	TRUE
		    camera			    OrthographicCamera {
			position	0.5 0.5 0.590418
			orientation	1 0 0  3.14159
			nearDistance	-1
			farDistance	1
			focalDistance	0
			height	1
		    }

		    complexity			    Complexity {
			value	0.5
			textureQuality	0.5
		    }

		    intersectionManip			    SoXipMprIntersectionManip {
			fields [ SFBool isManipulating, SFBool on, SFEnum mode,  ]
			isManipulating	FALSE
			on	TRUE
			mode	TRANSLATION
		    }

		    borderNode			    DEF +3 SoXipViewportBorder {
			fields [ SFColor activeColor, SFColor inactiveColor,  ]
			activeColor	1 0 0
			inactiveColor	1 0 0
		    }

		    dogEarNode			    DEF +4 SoXipDogEar {
			fields [  ]
		    }

		    orientationNode			    DEF +5 SoXipOrientationCube {
			fields [  ]
		    }

		    borderSwitch			    Switch {
			whichChild	0
			USE +3
		    }

		    dogEarSwitch			    Switch {
			whichChild	0
			USE +4
		    }

		    orientationSwitch			    Switch {
			whichChild	0
			USE +5
		    }

		}
		DEF +6 Group {
		    DEF +7 SoXipWindowLevelManip {
			fields [ SFFloat window, SFFloat level, SFEnum mouse,  ]
			window	0.429688
			level	0.310059
			mouse	BUTTON3
		    }
		    SoXipLut {
			fields [ SFEnum alphaMode, SFEnum fileMode, SFShort bitsUsed, SFFloat rampWidth,
				SFFloat rampCenter, SFColor colorMiddle, SFInt32 fileEntries, MFColor arrayColor,
				MFFloat arrayAlpha ]
			alphaMode	CONSTANT
			fileMode	FLOAT_COMMA
			bitsUsed	8
			rampWidth	0.429688 =
			    USE +7
			    . window

			rampCenter	0.310059 =
			    USE +7
			    . level

			colorMiddle	0.7 0.5 0.3
			fileEntries	4096
			arrayColor	[  ]
			arrayAlpha	[  ]
		    }
		}
		SoXipCPUMprRender {
		    fields [ SoXipSFDataImage volume,  ]
		    volume	"DATA" =
			DEF +8 SoXipVolumeDicom {
			    inputs [ SoXipMFDataDicom input ]
			    input	[ "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA",
					      "DATA" ] =
				SoXipSortDicom {
				    inputs [ SoXipMFDataDicom input ]
				    input	[ "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA",
						      "DATA" ] =
					SoXipLoadDicom {
					    inputs [ MFString name ]
					    name	"..\data\CTHead"
					    outputs [ SoXipMFDataDicom dicom ]
					}
					. dicom

				    outputs [ SoXipMFDataDicom output ]
				}
				. output

			    outputs [ SoXipSFDataImage output ]
			}
			. output

		}
	    }
	    Separator {
		Group {
		    USE +0
		    USE +2
		    USE +1
		}
		DEF MprExaminer1 SoXipMprExaminer {
		    orientation	LEFT
		    mode	ROTATE
		    border	TRUE
		    dogEar	TRUE
		    orientationCube	TRUE
		    camera			    OrthographicCamera {
			position	0.437085 0.475676 0.51125
			orientation	0.57735 0.57735 0.57735  2.0944
			nearDistance	-1
			farDistance	1
			focalDistance	0
			height	1
		    }

		    complexity			    Complexity {
			value	0.5
			textureQuality	0.5
		    }

		    intersectionManip			    SoXipMprIntersectionManip {
			fields [ SFBool isManipulating, SFBool on, SFEnum mode,  ]
			isManipulating	FALSE
			on	TRUE
			mode	TRANSLATION
		    }

		    borderNode			    DEF +9 SoXipViewportBorder {
			fields [ SFColor activeColor, SFColor inactiveColor,  ]
			activeColor	0 1 0
			inactiveColor	0 1 0
		    }

		    dogEarNode			    DEF +10 SoXipDogEar {
			fields [  ]
		    }

		    orientationNode			    DEF +11 SoXipOrientationCube {
			fields [  ]
		    }

		    borderSwitch			    Switch {
			whichChild	0
			USE +9
		    }

		    dogEarSwitch			    Switch {
			whichChild	0
			USE +10
		    }

		    orientationSwitch			    Switch {
			whichChild	0
			USE +11
		    }

		}
		USE +6
		SoXipCPUMprRender {
		    fields [ SoXipSFDataImage volume,  ]
		    volume	"DATA" =
			USE +8
			. output

		}
	    }
	    Separator {
		Group {
		    USE +2
		    USE +1
		    USE +0
		}
		DEF MprExaminer2 SoXipMprExaminer {
		    orientation	POSTERIOR
		    mode	ROTATE
		    border	TRUE
		    dogEar	TRUE
		    orientationCube	TRUE
		    camera			    OrthographicCamera {
			position	0.514838 0.494457 0.522612
			orientation	-0.0925308 0.874454 0.476202  3.11104
			nearDistance	-1
			farDistance	1
			focalDistance	0
			height	0.999999
		    }

		    complexity			    Complexity {
			value	0.5
			textureQuality	0.5
		    }

		    intersectionManip			    SoXipMprIntersectionManip {
			fields [ SFBool isManipulating, SFBool on, SFEnum mode,  ]
			isManipulating	FALSE
			on	TRUE
			mode	TRANSLATION
		    }

		    borderNode			    DEF +12 SoXipViewportBorder {
			fields [ SFColor activeColor, SFColor inactiveColor,  ]
			activeColor	0 0 1
			inactiveColor	0 0 1
		    }

		    dogEarNode			    DEF +13 SoXipDogEar {
			fields [  ]
		    }

		    orientationNode			    DEF +14 SoXipOrientationCube {
			fields [  ]
		    }

		    borderSwitch			    Switch {
			whichChild	0
			USE +12
		    }

		    dogEarSwitch			    Switch {
			whichChild	0
			USE +13
		    }

		    orientationSwitch			    Switch {
			whichChild	0
			USE +14
		    }

		}
		USE +6
		SoXipCPUMprRender {
		    fields [ SoXipSFDataImage volume,  ]
		    volume	"DATA" =
			USE +8
			. output

		}
	    }
	    Separator {
		SoXipExaminer {
		    perspective	FALSE
		    orientation	LEFT
		    mode	ROTATE
		    plane	-0 -5.96046e-008 1  0.5
		    complexity			    Complexity {
			value	0.5
			textureQuality	0.5
		    }

		    orthoCamera			    DEF +15 OrthographicCamera {
			viewportMapping	ADJUST_CAMERA
			position	0.511447 -0.363374 0.485476
			orientation	0.999809 0.0175224 0.00868469  1.55214
			aspectRatio	1
			nearDistance	-0
			farDistance	1.73205
			focalDistance	0.866025
			height	1.24416
		    }

		    perspectiveCamera			    DEF +16 PerspectiveCamera {
			position	0.5 0.5 -1.59077
			orientation	1 0 0  3.14159
			nearDistance	1.22474
			farDistance	2.9568
			focalDistance	2.09077
			heightAngle	0.785398
		    }

		    borderNode			    SoXipViewportBorder {
			fields [ SFColor activeColor, SFColor inactiveColor,  ]
			activeColor	0.7 0.7 0.7
			inactiveColor	0.7 0.7 0.7
		    }

		    cameraSwitch			    Switch {
			whichChild	0
			USE +15
			USE +16
		    }

		}
		DEF +17 SoXipTextureUnit {
		    fields [ SFInt32 textureStage, SFBool autoGenerate ]
		    autoGenerate	FALSE
		}
		SoXipTexture {
		    fields [ SoXipSFDataImage image, SFEnum internalFormat, SFVec3f textureSize,  ]
		    image	"DATA" =
			USE +8
			. output

		    internalFormat	LUMINANCE16
		    textureSize	256 256 226
		}
		DEF +18 SoXipWindowLevelManip {
		    fields [ SFFloat window, SFFloat level, SFEnum mouse,  ]
		    window	0.683594
		    level	0.411133
		    mouse	BUTTON3
		}
		DEF +19 SoXipTextureUnit {
		    fields [ SFInt32 textureStage, SFBool autoGenerate ]
		    textureStage	1
		    autoGenerate	FALSE
		}
		SoXipLut {
		    fields [ SFShort bitsUsed, SFFloat rampWidth, SFFloat rampCenter, SFColor colorMiddle,
			    MFColor arrayColor, MFFloat arrayAlpha ]
		    bitsUsed	8
		    rampWidth	0.683594 =
			USE +18
			. window

		    rampCenter	0.411133 =
			USE +18
			. level

		    colorMiddle	0.7 0.5 0.3
		    arrayColor	[  ]
		    arrayAlpha	[  ]
		}
		SoXipLutTexture {
		    fields [ SoSFVec2s textureSize ]
		    textureSize	256 1
		}
		SoXipLoadShaders {
		    fields [ SFString fpFilename,  ]
		    fpFilename	"slicerfp.glsl"
		}
		SoXipUniformInt {
		    fields [ SFString name, MFInt32 value ]
		    name	"volume"
		    value	0 =
			USE +17
			. textureStage

		}
		SoXipUniformInt {
		    fields [ SFString name, MFInt32 value ]
		    name	"lut"
		    value	1 =
			USE +19
			. textureStage

		}
		SoXipSlicer {
		    fields [ SFBool useComplexity, SFEnum compositing ]
		    useComplexity	FALSE
		    compositing	FRONT_TO_BACK
		}
	    }
	}
    }
    DEF Popup SoXipHtmlViewer {
	fields [ SFString file, SFInt32 width, SFInt32 height ]
	file	"html/popup.html"
	width	200
	height	200
    }
}
